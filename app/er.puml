@startuml er

skinparam nodesep 40
hide empty methods

package pool {
    entity Root {
        owner: agent.Root
        members: Set<agent.Root>
        subpools: Set<pool.Root>
        ..
        deps: Set<sig.Root>
        caps: Set<sig.Root>
    }
    
    Root o-- Root
}

package agent {
    entity Root
}

package sig as sig {
    entity Root {
        owner: agent.Root
        subsigs: Set<sig.Root>
        ..
        fqns: Set<fqn.Root>
        ces: List<chnl.Spec>
        pe: chnl.Spec
    }

    Root o-- Root
}

package chnl as chnl {
    entity Spec <<(V,lightblue)>> {
        key: String
        role: fqn.Root
    }
}

package role {
    entity role.Root {
        owner: agent.Root
        subroles: Set<role.Root>
        ..
        fqns: Set<fqn.Root>
        state: state.Root
    }

    Root o-- Root
}

package state {
    abstract class Root

    entity Link <<(V,lightblue)>> {
        role: fqn.Root
    }
    entity Plus <<(V,lightblue)>> {
        choices: Map<String, state.Root>
    }
    entity With <<(V,lightblue)>> {
        choices: Map<String, state.Root>
    }
    entity Tensor <<(V,lightblue)>> {
        b: state.Root
        c: state.Root
    }
    entity One <<(V,lightblue)>>
    entity Lolli <<(V,lightblue)>> {
        y: state.Root
        z: state.Root
    }

    Root <|-u- Link
    Root <|-d- One

    Root <|-l- Plus
    Root -l-o Plus
    Root <|-r- With
    Root -r-o With

    Root <|-d- Tensor
    Root -d-o Tensor
    Root <|-d- Lolli
    Root -d-o Lolli
}

package "fqn" as fqn1 {
    entity Root <<(V,lightblue)>>
}

pool.Root o-d- agent.Root
sig.Root o-l- agent.Root
role.Root o-u- agent.Root

pool.Root o-d- sig.Root
sig.Root o-d- chnl.Spec
role.Root o-d- state.Root

chnl.Spec -d-> role.Root
role.Root <-d- state.Link

(chnl.Spec, role.Root) -- fqn1.Root
(role.Root, state.Link) -- fqn1.Root
@enduml
